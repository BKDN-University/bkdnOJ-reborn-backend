# Generated by Django 4.0.3 on 2022-05-08 18:14

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import helpers.problem_data
import problem.models.problem_test_data
import problem.validators.problem_data_zip


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organization', '0001_initial'),
        ('judger', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('shortname', models.SlugField(help_text="This field is used to separate different problems from each other, similar to `problem code'. Only letters [A-Z], numbers [0-9], underscores (_) or hyphens (-) allowed. Max length is 128 characters. e.g. BIGNUM-PRIME, MAZE-3,... ", max_length=128, unique=True)),
                ('title', models.CharField(blank=True, default='', help_text='Title for problem', max_length=256)),
                ('content', models.TextField(blank=True, default='', help_text="Problem's statement")),
                ('pdf', models.FileField(blank=True, default=None, null=True, storage=helpers.problem_data.ProblemPDFStorage(), upload_to=helpers.problem_data.problem_directory_pdf, validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('source', models.CharField(blank=True, default='', help_text='Sources of the problem. For example: Codeforces Div.2 Round #123 - Problem D.', max_length=2048)),
                ('time_limit', models.FloatField(default=1.0, help_text='The time limit for this problem, in seconds. Fractional seconds (e.g. 1.5) are supported.', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20.0)])),
                ('memory_limit', models.PositiveIntegerField(default=262144, help_text='The memory limit for this problem, in kilobytes (e.g. 64mb = 65536 kilobytes).', validators=[django.core.validators.MinValueValidator(65536), django.core.validators.MaxValueValidator(1048576)])),
                ('is_published', models.BooleanField(default=False, help_text='If this option was False, only users added above (authors, collab,...) may see the problem. If this option was True, this problem is public (anyone can see and submit).')),
                ('published_at', models.DateTimeField(null=True)),
                ('is_privated_to_orgs', models.BooleanField(default=False, help_text='If this option was True, and problem is published, only added organizations may see and submit to the problem. ')),
                ('submission_visibility_mode', models.CharField(choices=[('FOLLOW', 'Follow global setting.'), ('ALWAYS', 'Always visible'), ('SOLVED', 'Visible if problem solved'), ('ONLY_OWN', 'Only own submissions'), ('HIDDEN', 'Submissions will never be shown')], default='FOLLOW', help_text="Determine if users can view submissions for this problem. This is for public problems only. For problems within certain contests, please set the contest's own submission visibility setting.", max_length=16)),
                ('points', models.FloatField(default=100, help_text="Points awarded for problem completion. Points are displayed with a 'p' suffix if partial.", validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='points')),
                ('partial', models.BooleanField(default=False, verbose_name='allows partial points')),
                ('short_circuit', models.BooleanField(default=False, verbose_name='short circuit')),
                ('solved_count', models.PositiveIntegerField(default=0, help_text='Number of users who has solved this problem')),
                ('attempted_count', models.PositiveIntegerField(default=0, help_text='Number of users who has attempted this problem')),
                ('allowed_languages', models.ManyToManyField(blank=True, default=[], help_text='List of allowed submission languages.', to='judger.language')),
                ('authors', models.ManyToManyField(blank=True, default=[], help_text='These users may view, edit the problem, and will be listed as Authors on the Problem Detail page.', related_name='authored_problem_set', to=settings.AUTH_USER_MODEL)),
                ('collaborators', models.ManyToManyField(blank=True, default=[], help_text="These users may view, edit the problem, but won't be listed as Authors on the Problem Detail page.", related_name='collaborated_problem_set', to=settings.AUTH_USER_MODEL)),
                ('organizations', models.ManyToManyField(blank=True, default=[], to='organization.organization')),
                ('reviewers', models.ManyToManyField(blank=True, default=[], help_text='These users may only view and make submissions to the problem', related_name='reviewed_problem_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProblemTestProfile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='test_profile', serialize=False, to='problem.problem', to_field='shortname')),
                ('zipfile', models.FileField(blank=True, null=True, storage=helpers.problem_data.ProblemDataStorage(), upload_to=problem.models.problem_test_data.problem_directory_file, validators=[problem.validators.problem_data_zip.ProblemDataZipFileValidator()])),
                ('generator', models.FileField(blank=True, null=True, storage=helpers.problem_data.ProblemDataStorage(), upload_to=problem.models.problem_test_data.problem_directory_file, verbose_name='generator file')),
                ('output_prefix', models.IntegerField(blank=True, null=True, verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, null=True, verbose_name='output limit length')),
                ('feedback', models.TextField(blank=True, verbose_name='init.yml generation feedback')),
                ('checker', models.CharField(blank=True, choices=[('standard', 'Standard'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line')], max_length=10, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
            ],
            options={
                'verbose_name': 'Problem Data Profile',
                'verbose_name_plural': 'Problem Data Profiles',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(null=True, verbose_name='case position')),
                ('type', models.CharField(choices=[('C', 'Normal case'), ('S', 'Batch start'), ('E', 'Batch end')], default='C', max_length=1, verbose_name='case type')),
                ('input_file', models.CharField(blank=True, max_length=100, verbose_name='input file name')),
                ('output_file', models.CharField(blank=True, max_length=100, verbose_name='output file name')),
                ('generator_args', models.TextField(blank=True, verbose_name='generator arguments')),
                ('points', models.IntegerField(blank=True, null=True, verbose_name='point value')),
                ('is_pretest', models.BooleanField(verbose_name='case is pretest?')),
                ('output_prefix', models.IntegerField(blank=True, null=True, verbose_name='output prefix length')),
                ('output_limit', models.IntegerField(blank=True, null=True, verbose_name='output limit length')),
                ('checker', models.CharField(blank=True, choices=[('standard', 'Standard'), ('floats', 'Floats'), ('floatsabs', 'Floats (absolute)'), ('floatsrel', 'Floats (relative)'), ('rstripped', 'Non-trailing spaces'), ('sorted', 'Unordered'), ('identical', 'Byte identical'), ('linecount', 'Line-by-line')], max_length=10, verbose_name='checker')),
                ('checker_args', models.TextField(blank=True, help_text='checker arguments as a JSON object', verbose_name='checker arguments')),
                ('test_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cases', to='problem.problemtestprofile')),
            ],
        ),
    ]
