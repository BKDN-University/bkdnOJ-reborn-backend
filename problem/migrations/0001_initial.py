# Generated by Django 4.0.3 on 2022-04-28 05:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import helpers.fileupload


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('judger', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='The identifier for this language; the same as its executor id for judges.', max_length=6, unique=True, verbose_name='short identifier')),
                ('name', models.CharField(help_text='Longer name for the language, e.g. "Python 2" or "C++11".', max_length=20, verbose_name='long name')),
                ('short_name', models.CharField(blank=True, help_text='More readable, but short, name to display publicly; e.g. "PY2" or "C++11". If left blank, it will default to the short identifier.', max_length=10, null=True, verbose_name='short name')),
                ('common_name', models.CharField(help_text='Common name for the language. For example, the common name for C++03, C++11, and C++14 would be "C++"', max_length=10, verbose_name='common name')),
                ('ace', models.CharField(help_text='Language ID for Ace.js editor highlighting, appended to "mode-" to determine the Ace JavaScript file to use, e.g., "python".', max_length=20, verbose_name='ace mode name')),
                ('pygments', models.CharField(help_text='Language ID for Pygments highlighting in source windows.', max_length=20, verbose_name='pygments name')),
                ('template', models.TextField(blank=True, help_text='Code template to display in submission editor.', verbose_name='code template')),
                ('info', models.CharField(blank=True, help_text="Do not set this unless you know what you're doing! It will override the usually more specific, judge-provided runtime info!", max_length=50, verbose_name='runtime info override')),
                ('description', models.TextField(blank=True, help_text='Use this field to inform users of quirks with your environment, additional restrictions, etc.', verbose_name='language description')),
                ('extension', models.CharField(help_text='The extension of source files, e.g., "py" or "cpp".', max_length=10, verbose_name='extension')),
            ],
            options={
                'verbose_name': 'language',
                'verbose_name_plural': 'languages',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='LanguageLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_limit', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20.0)], verbose_name='time limit')),
                ('memory_limit', models.IntegerField(validators=[django.core.validators.MinValueValidator(65536), django.core.validators.MaxValueValidator(1048576)], verbose_name='memory limit')),
            ],
            options={
                'verbose_name': 'language-specific resource limit',
                'verbose_name_plural': 'language-specific resource limits',
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('shortname', models.SlugField(help_text="This field is used to separate different problems from each other, similar to `problem code'. Only letters [A-Z], numbers [0-9], underscores (_) or hyphens (-) allowed. Max length is 128 characters. e.g. BIGNUM-PRIME, MAZE-3,... ", max_length=128, unique=True)),
                ('title', models.CharField(blank=True, default='', help_text='Title for problem', max_length=256)),
                ('content', models.TextField(blank=True, default='', help_text="Problem's statement")),
                ('source', models.CharField(blank=True, default='', help_text='Sources of the problem. For example: Codeforces Div.2 Round #123 - Problem D.', max_length=2048)),
                ('time_limit', models.FloatField(default=1.0, help_text='The time limit for this problem, in seconds. Fractional seconds (e.g. 1.5) are supported.', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(20.0)])),
                ('memory_limit', models.PositiveIntegerField(default=262144, help_text='The memory limit for this problem, in kilobytes (e.g. 64mb = 65536 kilobytes).', validators=[django.core.validators.MinValueValidator(65536), django.core.validators.MaxValueValidator(1048576)])),
                ('is_published', models.BooleanField(default=False, help_text='If this option was False, only users added above (authors, collab,...) may see the problem. If this option was True, this problem is public (anyone can see and submit).')),
                ('is_privated_to_orgs', models.BooleanField(default=False, help_text='If this option was True, and problem is published, only added organizations may see and submit to the problem. ')),
                ('submission_visibility_mode', models.CharField(choices=[('FOLLOW', 'Follow global setting.'), ('ALWAYS', 'Always visible'), ('SOLVED', 'Visible if problem solved'), ('ONLY_OWN', 'Only own submissions'), ('HIDDEN', 'Submissions will never be shown')], default='FOLLOW', help_text="Determine if users can view submissions for this problem. This is for public problems only. For problems within certain contests, please set the contest's own submission visibility setting.", max_length=16)),
                ('solved_count', models.PositiveIntegerField(default=0, help_text='Number of users who has solved this problem')),
                ('attempted_count', models.PositiveIntegerField(default=0, help_text='Number of users who has attempted this problem')),
                ('allowed_language', models.ManyToManyField(blank=True, default=[], help_text='List of allowed submission languages.', to='judger.language')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProblemTestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rel_input_file_url', models.CharField(max_length=500)),
                ('rel_answer_file_url', models.CharField(max_length=500)),
                ('order', models.IntegerField()),
                ('points', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='ProblemTestDataProfile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('problem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='test_profile', serialize=False, to='problem.problem', to_field='shortname')),
                ('zip_url', models.FileField(blank=True, null=True, upload_to=helpers.fileupload.PathAndRename('problems/test_data'))),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
