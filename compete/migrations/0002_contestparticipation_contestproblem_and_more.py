# Generated by Django 4.0.4 on 2022-05-16 08:40

import compete.models.contest_data
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('userprofile', '0002_userprofile_orgs'),
        ('problem', '0002_alter_problem_partial_alter_problem_short_circuit_and_more'),
        ('organization', '0002_alter_organization_members_alter_orgmembership_user'),
        ('submission', '0003_alter_submission_options'),
        ('compete', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContestParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('real_start', models.DateTimeField(db_column='start', default=django.utils.timezone.now, verbose_name='start time')),
                ('score', models.FloatField(db_index=True, default=0, verbose_name='score')),
                ('cumtime', models.PositiveIntegerField(default=0, verbose_name='cumulative time')),
                ('is_disqualified', models.BooleanField(default=False, help_text='Whether this participation is disqualified.', verbose_name='is disqualified')),
                ('tiebreaker', models.FloatField(default=0.0, verbose_name='tie-breaking field')),
                ('virtual', models.IntegerField(default=0, help_text='0 means non-virtual, otherwise the n-th virtual participation.', verbose_name='virtual participation id')),
            ],
            options={
                'verbose_name': 'contest participation',
                'verbose_name_plural': 'contest participations',
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(verbose_name='points')),
                ('partial', models.BooleanField(default=True, verbose_name='partial')),
                ('is_pretested', models.BooleanField(default=False, verbose_name='is pretested')),
                ('order', models.PositiveIntegerField(db_index=True, verbose_name='order')),
                ('output_prefix_override', models.IntegerField(blank=True, default=0, null=True, verbose_name='output prefix length override')),
                ('max_submissions', models.IntegerField(blank=True, default=None, help_text='Maximum number of submissions for this problem, or leave blank for no limit.', null=True, validators=[compete.models.contest_data.MinValueOrNoneValidator(1, "Why include a problem you can't submit to?")], verbose_name='max submissions')),
            ],
            options={
                'verbose_name': 'contest problem',
                'verbose_name_plural': 'contest problems',
                'ordering': ('order',),
            },
        ),
        migrations.AlterModelOptions(
            name='contest',
            options={'permissions': (('see_private_contest', 'See private contests'), ('edit_own_contest', 'Edit own contests'), ('edit_all_contest', 'Edit all contests'), ('clone_contest', 'Clone contest'), ('moss_contest', 'MOSS contest'), ('contest_rating', 'Rate contests'), ('contest_access_code', 'Contest access codes'), ('create_private_contest', 'Create private contests'), ('change_contest_visibility', 'Change contest visibility'), ('contest_problem_label', 'Edit contest problem label script'), ('lock_contest', 'Change lock status of contest')), 'verbose_name': 'contest', 'verbose_name_plural': 'contests'},
        ),
        migrations.AddField(
            model_name='contest',
            name='access_code',
            field=models.CharField(blank=True, default='', help_text='An optional code to prompt contestants before they are allowed to join the contest. Leave it blank to disable.', max_length=255, verbose_name='access code'),
        ),
        migrations.AddField(
            model_name='contest',
            name='authors',
            field=models.ManyToManyField(help_text='These users will be able to edit the contest.', related_name='authored_contests', to='userprofile.userprofile', verbose_name='authors'),
        ),
        migrations.AddField(
            model_name='contest',
            name='banned_users',
            field=models.ManyToManyField(blank=True, help_text='Bans the selected users from joining this contest.', to='userprofile.userprofile', verbose_name='Banned users'),
        ),
        migrations.AddField(
            model_name='contest',
            name='curators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to edit the contest, but will not be listed as authors.', related_name='curated_contests', to='userprofile.userprofile', verbose_name='curators'),
        ),
        migrations.AddField(
            model_name='contest',
            name='description',
            field=models.TextField(blank=True, verbose_name='description'),
        ),
        migrations.AddField(
            model_name='contest',
            name='end_time',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='end time'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='contest',
            name='format_name',
            field=models.CharField(choices=[('default', 'Default')], default='default', help_text='The contest format module to use.', max_length=32, verbose_name='contest format'),
        ),
        migrations.AddField(
            model_name='contest',
            name='hide_problem_authors',
            field=models.BooleanField(default=False, help_text='Whether problem authors should be hidden by default.', verbose_name='hide problem authors'),
        ),
        migrations.AddField(
            model_name='contest',
            name='hide_problem_tags',
            field=models.BooleanField(default=False, help_text='Whether problem tags should be hidden by default.', verbose_name='hide problem tags'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_organization_private',
            field=models.BooleanField(default=False, verbose_name='private to organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_private',
            field=models.BooleanField(default=False, verbose_name='private to specific users'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_rated',
            field=models.BooleanField(default=False, help_text='Whether this contest can be rated.', verbose_name='contest rated'),
        ),
        migrations.AddField(
            model_name='contest',
            name='is_visible',
            field=models.BooleanField(default=False, help_text='Should be set even for organization-private contests, where it determines whether the contest is visible to members of the specified organizations.', verbose_name='publicly visible'),
        ),
        migrations.AddField(
            model_name='contest',
            name='join_organizations',
            field=models.ManyToManyField(blank=True, help_text='If non-empty, only these organizations may join the contest', related_name='join_only_contests', to='organization.organization', verbose_name='join organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='key',
            field=models.CharField(default=django.utils.timezone.now, max_length=40, unique=True, validators=[django.core.validators.RegexValidator('^[a-z0-9]+$', 'Contest id must be ^[a-z0-9]+$')], verbose_name='contest id'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='contest',
            name='limit_join_organizations',
            field=models.BooleanField(default=False, verbose_name='limit organizations that can join'),
        ),
        migrations.AddField(
            model_name='contest',
            name='locked_after',
            field=models.DateTimeField(blank=True, help_text='Prevent submissions from this contest from being rejudged after this date.', null=True, verbose_name='contest lock'),
        ),
        migrations.AddField(
            model_name='contest',
            name='logo_override_image',
            field=models.CharField(blank=True, default='', help_text='This image will replace the default site logo for users inside the contest.', max_length=150, verbose_name='Logo override image'),
        ),
        migrations.AddField(
            model_name='contest',
            name='name',
            field=models.CharField(db_index=True, default=django.utils.timezone.now, max_length=200, verbose_name='contest name'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='contest',
            name='og_image',
            field=models.CharField(blank=True, default='', max_length=150, verbose_name='OpenGraph image'),
        ),
        migrations.AddField(
            model_name='contest',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='If non-empty, only these organizations may see the contest', to='organization.organization', verbose_name='organizations'),
        ),
        migrations.AddField(
            model_name='contest',
            name='points_precision',
            field=models.IntegerField(default=3, help_text='Number of digits to round points to.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='precision points'),
        ),
        migrations.AddField(
            model_name='contest',
            name='private_contestants',
            field=models.ManyToManyField(blank=True, help_text='If non-empty, only these users may see the contest', related_name='private_contestants+', to='userprofile.userprofile', verbose_name='private contestants'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problem_label_script',
            field=models.TextField(blank=True, help_text='A custom Lua function to generate problem labels. Requires a single function with an integer parameter, the zero-indexed contest problem index, and returns a string, the label.', verbose_name='contest problem label script'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problems',
            field=models.ManyToManyField(through='compete.ContestProblem', to='problem.problem', verbose_name='problems'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rate_all',
            field=models.BooleanField(default=False, help_text='Rate all users who joined.', verbose_name='rate all'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rate_exclude',
            field=models.ManyToManyField(blank=True, related_name='rate_exclude+', to='userprofile.userprofile', verbose_name='exclude from ratings'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rating_ceiling',
            field=models.IntegerField(blank=True, help_text='Rating ceiling for contest', null=True, verbose_name='rating ceiling'),
        ),
        migrations.AddField(
            model_name='contest',
            name='rating_floor',
            field=models.IntegerField(blank=True, help_text='Rating floor for contest', null=True, verbose_name='rating floor'),
        ),
        migrations.AddField(
            model_name='contest',
            name='run_pretests_only',
            field=models.BooleanField(default=False, help_text='Whether judges should grade pretests only, versus all testcases. Commonly set during a contest, then unset prior to rejudging user submissions when the contest ends.', verbose_name='run pretests only'),
        ),
        migrations.AddField(
            model_name='contest',
            name='scoreboard_visibility',
            field=models.CharField(choices=[('V', 'Visible'), ('C', 'Hidden for duration of contest'), ('P', 'Hidden for duration of participation'), ('H', 'Hidden permanently')], default='V', help_text='Scoreboard visibility through the duration of the contest', max_length=1, verbose_name='scoreboard visibility'),
        ),
        migrations.AddField(
            model_name='contest',
            name='show_short_display',
            field=models.BooleanField(default=False, help_text='Whether to show a section containing contest settings on the contest page or not.', verbose_name='show short form settings display'),
        ),
        migrations.AddField(
            model_name='contest',
            name='spectators',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to spectate the contest, but not see the problems ahead of time.', related_name='spectated_contests', to='userprofile.userprofile', verbose_name='spectators'),
        ),
        migrations.AddField(
            model_name='contest',
            name='start_time',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='start time'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='contest',
            name='summary',
            field=models.TextField(blank=True, help_text='Plain-text, shown in meta description tag, e.g. for social media.', verbose_name='contest summary'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tester_see_scoreboard',
            field=models.BooleanField(default=False, help_text='If testers can see the scoreboard.', verbose_name='testers see scoreboard'),
        ),
        migrations.AddField(
            model_name='contest',
            name='tester_see_submissions',
            field=models.BooleanField(default=False, help_text='If testers can see in-contest submissions.', verbose_name='testers see submissions'),
        ),
        migrations.AddField(
            model_name='contest',
            name='testers',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the contest, but not edit it.', related_name='tested_contests', to='userprofile.userprofile', verbose_name='testers'),
        ),
        migrations.AddField(
            model_name='contest',
            name='time_limit',
            field=models.DurationField(blank=True, null=True, verbose_name='time limit'),
        ),
        migrations.AddField(
            model_name='contest',
            name='use_clarifications',
            field=models.BooleanField(default=True, help_text='Allow participants to submit clarifications', verbose_name='Allow clarifications'),
        ),
        migrations.AddField(
            model_name='contest',
            name='user_count',
            field=models.IntegerField(default=0, verbose_name='the amount of live participants'),
        ),
        migrations.AddField(
            model_name='contest',
            name='view_contest_scoreboard',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to view the scoreboard.', related_name='view_contest_scoreboard', to='userprofile.userprofile', verbose_name='view contest scoreboard'),
        ),
        migrations.AddField(
            model_name='contest',
            name='view_contest_submissions',
            field=models.ManyToManyField(blank=True, help_text='These users will be able to see in-contest submissions.', related_name='view_contest_submissions', to='userprofile.userprofile', verbose_name='can see contest submissions'),
        ),
        migrations.CreateModel(
            name='ContestSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.FloatField(default=0.0, verbose_name='points')),
                ('is_pretest', models.BooleanField(default=False, help_text='Whether this submission was ran only on pretests.', verbose_name='is pretested')),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='compete.contestparticipation', verbose_name='participation')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', related_query_name='submission', to='compete.contestproblem', verbose_name='problem')),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contest', to='submission.submission', verbose_name='submission')),
            ],
            options={
                'verbose_name': 'contest submission',
                'verbose_name_plural': 'contest submissions',
            },
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_problems', to='compete.contest', verbose_name='contest'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contests', to='problem.problem', verbose_name='problem'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='compete.contest', verbose_name='associated contest'),
        ),
        migrations.AddField(
            model_name='contestparticipation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_history', to='userprofile.userprofile', verbose_name='user'),
        ),
        migrations.AlterUniqueTogether(
            name='contestproblem',
            unique_together={('problem', 'contest')},
        ),
        migrations.AlterUniqueTogether(
            name='contestparticipation',
            unique_together={('contest', 'user', 'virtual')},
        ),
    ]
